# -*- coding: utf-8 -*-
"""credit_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e1n8j6JyouaU4PH0jfNC4w4HPMRV5CQV
"""

import subprocess
subprocess.run(["pip", "install", "streamlit"])

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load scaler and model
# Make sure these files ('scaler.pkl' and 'credit_model.pkl') exist in your environment
try:
    scaler = joblib.load('scaler.pkl')
    model = joblib.load('credit_model.pkl')
except FileNotFoundError:
    st.error("Error: scaler.pkl or credit_model.pkl not found. Please ensure these files are in the correct directory.")
    st.stop()


st.title("Credit Card Default Prediction")

# Input fields
LIMIT_BAL = st.number_input("Credit Limit (₹)", min_value=1000, max_value=1000000, value=50000)
SEX = st.selectbox("Gender", options=[1, 2], format_func=lambda x: "Male" if x == 1 else "Female")
EDUCATION = st.selectbox("Education", options=[0, 1, 2, 3, 4, 5, 6], format_func=lambda x: {0:"Uneducate",1:"High School",2:"Under Graduate",3:"Post Graduate",4:"PhD",5:"Vocational",6:"Others"}[x])
MARRIAGE = st.selectbox("Marital Status", options=[0, 1, 2, 3], format_func=lambda x: {0:"Other",1:"Married", 2:"Unmarried" ,3:"Divorce"}[x])
AGE = st.slider("Age", min_value=18, max_value=100, value=30)

# PAY_1 to PAY_6
pay_cols = []
for i in range(1, 7):
    val = st.number_input(
        f"PAY_{i} (Payment Status: -2=No use, -1=Paid full, 0=On time, 1-9=Delay)",
        min_value=-2,
        max_value=9,
        value=-1, # Changed default value
        key=f"pay_{i}"
    )
    pay_cols.append(val)

# BILL_AMT1 to BILL_AMT6
bill_amts = [st.number_input(f"BILL_AMT{i} (₹)", value=0, step=100, key=f"bill_{i}") for i in range(1, 7)]

# PAY_AMT1 to PAY_AMT6
pay_amts = [st.number_input(f"PAY_AMT{i} (₹)", value=0, step=100, key=f"pamt_{i}") for i in range(1, 7)]

# Feature Engineering (recreating features based on the traceback)
avg_pay_delay = np.mean(pay_cols)
total_bill_amt = sum(bill_amts)
total_pay_amt = sum(pay_amts)
limit_util_ratio = total_bill_amt / LIMIT_BAL if LIMIT_BAL > 0 else 0
pay_vs_bill_ratio = total_pay_amt / (total_bill_amt + 1) if (total_bill_amt + 1) != 0 else 0 # Added +1 to avoid division by zero
months_late = sum(1 for p in pay_cols if p > 0)
no_payment_flag = 1 if all(p == 0 for p in pay_amts) else 0 # Renamed from is_frequent_defaulter




# Create raw features DataFrame
raw_features_data = [[
    LIMIT_BAL, SEX, EDUCATION, MARRIAGE, AGE,
    *pay_cols, *bill_amts, *pay_amts
]]
raw_features_columns = [
    'LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE',
    'PAY_1', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6',
    'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6',
    'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6'
]
raw_features = pd.DataFrame(raw_features_data, columns=raw_features_columns)


# Create engineered features DataFrame
engineered_features_data = [[
    avg_pay_delay, total_bill_amt, total_pay_amt,
    limit_util_ratio, pay_vs_bill_ratio, months_late, no_payment_flag,

]]
engineered_features_columns = [
    'avg_pay_delay', 'total_bill_amt', 'total_pay_amt',
    'limit_util_ratio', 'pay_vs_bill_ratio', 'months_late', 'no_payment_flag',

]
engineered_features = pd.DataFrame(engineered_features_data, columns=engineered_features_columns)

# Combine raw + engineered features
# Ensure the order of columns matches the training data used for the scaler
combined_input = pd.concat([raw_features, engineered_features], axis=1)

# Reindex combined_input to match the expected columns from the scaler
expected_columns = scaler.feature_names_in_

# Debugging: Print columns before reindexing
print("Columns of combined_input before reindexing:", combined_input.columns.tolist())
print("Expected columns from scaler:", expected_columns.tolist())


combined_input = combined_input.reindex(columns=expected_columns, fill_value=0)

# Debugging: Print columns after reindexing
print("Columns of combined_input after reindexing:", combined_input.columns.tolist())


# Scale the final input
final_input_scaled = scaler.transform(combined_input)


if st.button("Predict Default Risk"):
    prediction = model.predict(final_input_scaled)[0]
    prob = model.predict_proba(final_input_scaled)[0][1]

    if prediction == 1:
        st.error(f"⚠️ Risk: Likely to Default! (Probability: {prob:.2%})")
    else:
        st.success(f"✅ Safe: Not Likely to Default (Probability: {1 - prob:.2%})")